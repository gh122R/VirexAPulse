<?php

require_once __DIR__ . "/app/Core/Bootstrap/bootstrap.php";

use App\Core\Facades\Environment\Manager as EnvironmentManager;
use App\Core\Facades\Route;
use src\Controllers\HomeController;
use src\Middleware\TestMiddleware;

/*
 * +-------------------------------------------------------------------------------------------------------------+
*  | Здесь происходить регистрация маршрутов. Чтобы зарегистрировать маршрут, обратитесь к Route и его методу    |
 * | Всего у Route есть 3 метода, доступные для вызова: get, post и view.                                        |
 * | Если вы регистрируете маршрут с помощью get или post, то роутер будет обрабатывать маршруты только          |
 * | с тем http-методом, который соответствует названию метода регистрации. Метод view по умолчанию регистрирует |
 * | маршруты с методом get.                                                                                     |
 * | Например, если вы зарегистрировали маршрут: <<<Route::get('/', fn()=> 123)>>> и попробуете отправить        |
 * | post-запрос, роутер выбросит исключение                                                                     |
 * +-------------------------------------------------------------------------------------------------------------+
 * */

Route::view('/', 'welcome');
Route::get('/home/{id}', [HomeController::class, 'index']);
Route::get('/test-view', fn() => view('test', ['Variable' => '123']));
Route::get('/redirect', fn() => redirect('/test-view', ['message' => 'Hi!'],1));
Route::get('/env', fn () => pd(EnvironmentManager::get(['username', 'password', 'driver'])));
Route::get('/doc', fn () => error('Документации пока нет :(', description: 'Наверное, скоро будет'));
Route::get('/middlewares', [HomeController::class, 'index'], [
    [TestMiddleware::class, 'forTest'],
    [TestMiddleware::class, 'empty']
]);

Route::group(['middleware' => ['web'], 'prefix' => 'name123'], function () {
    Route::view('/t', 'test');
    Route::view('/w', 'home');
});

/*
 * +-----------------------------------------------------------------------------------------------------------------------------------+
 * | Если вы регистрируете маршрут с помощью <<<Route::get>>> или <<<Route::post>>>, то                                                |
 * | первый аргумент это, собственно, сам маршрут :) Например /home                                                                    |
 * | Второй аргумент - массив из названия класса и его метода, который будет вызван, либо замыкание.                                   |
 * | Третий аргумент - список middleware' ов. Он всегда указывается во вложенном массиве, например:                                    |
 * | <<<[                                                                                                                              |
 * |  [GigaMiddleware::class, 'index', 123],                                                                                           |
 * |  [SuperMiddleware::class, 'index']                                                                                                |
 * | ]>>>                                                                                                                              |
 * | То есть, мы открываем массив, внутри которого указываем middleware' ы. Они, как и 2-й аргумент могут быть массивом                |
 * | из класса, его метода + можно указать значение, которое будет передано в конструктор middleware' а.                               |
 * | Вы также можете использовать замыкания вместо массивов middleware, тогда вид будет такой:                                         |
 * | <<<[                                                                                                                              |
 * | fn () => "Дальше прохода нет"                                                                                                     |
 * | ]>>>                                                                                                                              |
 * | либо массивы замыканий:                                                                                                           |
 * | <<<[                                                                                                                              |
 * | [fn () => "Дальше прохода нет"],                                                                                                  |
 * | [fn(callable $next) => next()] //Пропускаем на следующий middleware                                                               |
 * | ]>>>                                                                                                                              |
 * |  Каждый метод middleware' а должен принимать callable $next и, при позитивном сценарии, вызывать её в конце: return $next()       |
 * +-----------------------------------------------------------------------------------------------------------------------------------+
 */
